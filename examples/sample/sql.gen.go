// Code generated by sqlgen DO NOT EDIT.

package test

import (
	"database/sql"
	time "time"

	core "github.com/ng-vu/sqlgen/core"
	sq "github.com/ng-vu/sqlgen/typesafe/sq"
)

type SQLWriter = core.SQLWriter

type Users []*User

const __sqlUser_Table = "user"
const __sqlUser_ListCols = "\"id\",\"name\",\"created_at\",\"updated_at\",\"bool\",\"float64\",\"int\",\"int64\",\"string\",\"p_bool\",\"p_float64\",\"p_int\",\"p_int64\",\"p_string\""
const __sqlUser_Insert = "INSERT INTO \"user\" (" + __sqlUser_ListCols + ") VALUES"
const __sqlUser_Select = "SELECT " + __sqlUser_ListCols + " FROM \"user\""
const __sqlUser_Select_history = "SELECT " + __sqlUser_ListCols + " FROM history.\"user\""
const __sqlUser_UpdateAll = "UPDATE \"user\" SET (" + __sqlUser_ListCols + ")"

func (m *User) SQLTableName() string { return "user" }
func (m Users) SQLTableName() string { return "user" }

func (m *User) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.String(m.ID),
		core.String(m.Name),
		core.Time(m.CreatedAt),
		m.UpdatedAt,
		core.Bool(m.Bool),
		core.Float64(m.Float64),
		core.Int(m.Int),
		core.Int64(m.Int64),
		core.String(m.String),
		m.PBool,
		m.PFloat64,
		m.PInt,
		m.PInt64,
		m.PString,
	}
}

func (m *User) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.ID),
		(*core.String)(&m.Name),
		(*core.Time)(&m.CreatedAt),
		&m.UpdatedAt,
		(*core.Bool)(&m.Bool),
		(*core.Float64)(&m.Float64),
		(*core.Int)(&m.Int),
		(*core.Int64)(&m.Int64),
		(*core.String)(&m.String),
		&m.PBool,
		&m.PFloat64,
		&m.PInt,
		&m.PInt64,
		&m.PString,
	}
}

func (m *User) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Users) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Users, 0, 128)
	for rows.Next() {
		m := new(User)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *User) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_Select)
	return nil
}

func (_ Users) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_Select)
	return nil
}

func (m *User) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Users) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *User) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unused error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("user")
	w.WriteRawString(" SET ")
	if m.ID != "" {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.UpdatedAt)
	}
	if m.Bool {
		flag = true
		w.WriteName("bool")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Bool)
	}
	if m.Float64 != 0 {
		flag = true
		w.WriteName("float64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Float64)
	}
	if m.Int != 0 {
		flag = true
		w.WriteName("int")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Int)
	}
	if m.Int64 != 0 {
		flag = true
		w.WriteName("int64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Int64)
	}
	if m.String != "" {
		flag = true
		w.WriteName("string")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.String)
	}
	if m.PBool != nil {
		flag = true
		w.WriteName("p_bool")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PBool)
	}
	if m.PFloat64 != nil {
		flag = true
		w.WriteName("p_float64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PFloat64)
	}
	if m.PInt != nil {
		flag = true
		w.WriteName("p_int")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PInt)
	}
	if m.PInt64 != nil {
		flag = true
		w.WriteName("p_int64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PInt64)
	}
	if m.PString != nil {
		flag = true
		w.WriteName("p_string")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PString)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *User) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type UserSubsets []*UserSubset

const __sqlUserSubset_Table = "user_subset"
const __sqlUserSubset_ListCols = "\"id\",\"bool\",\"float64\",\"int\",\"int64\",\"string\",\"p_bool\",\"p_float64\",\"p_int\",\"p_int64\",\"p_string\""
const __sqlUserSubset_Insert = "INSERT INTO \"user_subset\" (" + __sqlUserSubset_ListCols + ") VALUES"
const __sqlUserSubset_Select = "SELECT " + __sqlUserSubset_ListCols + " FROM \"user_subset\""
const __sqlUserSubset_Select_history = "SELECT " + __sqlUserSubset_ListCols + " FROM history.\"user_subset\""
const __sqlUserSubset_UpdateAll = "UPDATE \"user_subset\" SET (" + __sqlUserSubset_ListCols + ")"

func (m *UserSubset) SQLTableName() string { return "user_subset" }
func (m UserSubsets) SQLTableName() string { return "user_subset" }

func (m *UserSubset) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.String(m.ID),
		core.Bool(m.Bool),
		core.Float64(m.Float64),
		core.Int(m.Int),
		core.Int64(m.Int64),
		core.String(m.String),
		m.PBool,
		m.PFloat64,
		m.PInt,
		m.PInt64,
		m.PString,
	}
}

func (m *UserSubset) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.ID),
		(*core.Bool)(&m.Bool),
		(*core.Float64)(&m.Float64),
		(*core.Int)(&m.Int),
		(*core.Int64)(&m.Int64),
		(*core.String)(&m.String),
		&m.PBool,
		&m.PFloat64,
		&m.PInt,
		&m.PInt64,
		&m.PString,
	}
}

func (m *UserSubset) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *UserSubsets) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(UserSubsets, 0, 128)
	for rows.Next() {
		m := new(UserSubset)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *UserSubset) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserSubset_Select)
	return nil
}

func (_ UserSubsets) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserSubset_Select)
	return nil
}

func (m *UserSubset) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserSubset_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms UserSubsets) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserSubset_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(11)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *UserSubset) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unused error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("user_subset")
	w.WriteRawString(" SET ")
	if m.ID != "" {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Bool {
		flag = true
		w.WriteName("bool")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Bool)
	}
	if m.Float64 != 0 {
		flag = true
		w.WriteName("float64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Float64)
	}
	if m.Int != 0 {
		flag = true
		w.WriteName("int")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Int)
	}
	if m.Int64 != 0 {
		flag = true
		w.WriteName("int64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Int64)
	}
	if m.String != "" {
		flag = true
		w.WriteName("string")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.String)
	}
	if m.PBool != nil {
		flag = true
		w.WriteName("p_bool")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PBool)
	}
	if m.PFloat64 != nil {
		flag = true
		w.WriteName("p_float64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PFloat64)
	}
	if m.PInt != nil {
		flag = true
		w.WriteName("p_int")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PInt)
	}
	if m.PInt64 != nil {
		flag = true
		w.WriteName("p_int64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PInt64)
	}
	if m.PString != nil {
		flag = true
		w.WriteName("p_string")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PString)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *UserSubset) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlUserSubset_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type UserInfoes []*UserInfo

const __sqlUserInfo_Table = "user_info"
const __sqlUserInfo_ListCols = "\"user_id\",\"metadata\",\"bool\",\"float64\",\"int\",\"int64\",\"string\",\"p_bool\",\"p_float64\",\"p_int\",\"p_int64\",\"p_string\""
const __sqlUserInfo_Insert = "INSERT INTO \"user_info\" (" + __sqlUserInfo_ListCols + ") VALUES"
const __sqlUserInfo_Select = "SELECT " + __sqlUserInfo_ListCols + " FROM \"user_info\""
const __sqlUserInfo_Select_history = "SELECT " + __sqlUserInfo_ListCols + " FROM history.\"user_info\""
const __sqlUserInfo_UpdateAll = "UPDATE \"user_info\" SET (" + __sqlUserInfo_ListCols + ")"

func (m *UserInfo) SQLTableName() string  { return "user_info" }
func (m UserInfoes) SQLTableName() string { return "user_info" }

func (m *UserInfo) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.String(m.UserID),
		core.String(m.Metadata),
		core.Bool(m.Bool),
		core.Float64(m.Float64),
		core.Int(m.Int),
		core.Int64(m.Int64),
		core.String(m.String),
		m.PBool,
		m.PFloat64,
		m.PInt,
		m.PInt64,
		m.PString,
	}
}

func (m *UserInfo) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.UserID),
		(*core.String)(&m.Metadata),
		(*core.Bool)(&m.Bool),
		(*core.Float64)(&m.Float64),
		(*core.Int)(&m.Int),
		(*core.Int64)(&m.Int64),
		(*core.String)(&m.String),
		&m.PBool,
		&m.PFloat64,
		&m.PInt,
		&m.PInt64,
		&m.PString,
	}
}

func (m *UserInfo) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *UserInfoes) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(UserInfoes, 0, 128)
	for rows.Next() {
		m := new(UserInfo)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *UserInfo) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInfo_Select)
	return nil
}

func (_ UserInfoes) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInfo_Select)
	return nil
}

func (m *UserInfo) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInfo_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms UserInfoes) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInfo_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(12)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *UserInfo) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unused error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("user_info")
	w.WriteRawString(" SET ")
	if m.UserID != "" {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if m.Metadata != "" {
		flag = true
		w.WriteName("metadata")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Metadata)
	}
	if m.Bool {
		flag = true
		w.WriteName("bool")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Bool)
	}
	if m.Float64 != 0 {
		flag = true
		w.WriteName("float64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Float64)
	}
	if m.Int != 0 {
		flag = true
		w.WriteName("int")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Int)
	}
	if m.Int64 != 0 {
		flag = true
		w.WriteName("int64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Int64)
	}
	if m.String != "" {
		flag = true
		w.WriteName("string")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.String)
	}
	if m.PBool != nil {
		flag = true
		w.WriteName("p_bool")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PBool)
	}
	if m.PFloat64 != nil {
		flag = true
		w.WriteName("p_float64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PFloat64)
	}
	if m.PInt != nil {
		flag = true
		w.WriteName("p_int")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PInt)
	}
	if m.PInt64 != nil {
		flag = true
		w.WriteName("p_int64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PInt64)
	}
	if m.PString != nil {
		flag = true
		w.WriteName("p_string")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(*m.PString)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *UserInfo) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInfo_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type UserUnions []*UserUnion

var __sqlUserUnion_JoinTypes = []sq.JOIN_TYPE{sq.FULL_JOIN}
var __sqlUserUnion_As sq.AS = "u"
var __sqlUserUnion_JoinAs = []sq.AS{"ui"}
var __sqlUserUnion_JoinConds = []string{"u.id = ui.user_id"}

func (m *UserUnion) SQLTableName() string { return "user" }
func (m UserUnions) SQLTableName() string { return "user" }

func (m *UserUnion) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *UserUnions) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(UserUnions, 0, 128)
	for rows.Next() {
		m := new(UserUnion)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *UserUnion) SQLSelect(w SQLWriter) error {
	(*UserUnion)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*UserUnion)(nil).__sqlJoin(w, __sqlUserUnion_JoinTypes)
	return nil
}

func (m UserUnions) SQLSelect(w SQLWriter) error {
	return (*UserUnion)(nil).SQLSelect(w)
}

func (m *UserUnion) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlUserUnion_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m UserUnions) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*UserUnion)(nil).SQLJoin(w, types)
}

func (m *UserUnion) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlUserUnion_As), __sqlUser_ListCols)
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlUserUnion_JoinAs[0]), __sqlUserInfo_ListCols)
}

func (m *UserUnion) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("sqlgen: expect type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("user")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlUserUnion_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName(__sqlUserInfo_Table)
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlUserUnion_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlUserUnion_JoinConds[0])
}

func (m *UserUnion) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.User = new(User)
	args = append(args, m.User.SQLScanArgs(opts)...)
	m.UserInfo = new(UserInfo)
	args = append(args, m.UserInfo.SQLScanArgs(opts)...)

	return args
}

type UserUnionMores []*UserUnionMore

var __sqlUserUnionMore_JoinTypes = []sq.JOIN_TYPE{sq.FULL_JOIN, sq.RIGHT_JOIN}
var __sqlUserUnionMore_As sq.AS = "u"
var __sqlUserUnionMore_JoinAs = []sq.AS{"ui", "us"}
var __sqlUserUnionMore_JoinConds = []string{"u.id = ui.user_id", "u.id = us.id"}

func (m *UserUnionMore) SQLTableName() string { return "user" }
func (m UserUnionMores) SQLTableName() string { return "user" }

func (m *UserUnionMore) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *UserUnionMores) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(UserUnionMores, 0, 128)
	for rows.Next() {
		m := new(UserUnionMore)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *UserUnionMore) SQLSelect(w SQLWriter) error {
	(*UserUnionMore)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*UserUnionMore)(nil).__sqlJoin(w, __sqlUserUnionMore_JoinTypes)
	return nil
}

func (m UserUnionMores) SQLSelect(w SQLWriter) error {
	return (*UserUnionMore)(nil).SQLSelect(w)
}

func (m *UserUnionMore) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlUserUnionMore_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m UserUnionMores) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*UserUnionMore)(nil).SQLJoin(w, types)
}

func (m *UserUnionMore) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlUserUnionMore_As), __sqlUser_ListCols)
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlUserUnionMore_JoinAs[0]), __sqlUserInfo_ListCols)
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlUserUnionMore_JoinAs[1]), __sqlUserSubset_ListCols)
}

func (m *UserUnionMore) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 2 {
		panic("sqlgen: expect types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("user")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlUserUnionMore_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName(__sqlUserInfo_Table)
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlUserUnionMore_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlUserUnionMore_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName(__sqlUserSubset_Table)
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlUserUnionMore_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlUserUnionMore_JoinConds[1])
}

func (m *UserUnionMore) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.User = new(User)
	args = append(args, m.User.SQLScanArgs(opts)...)
	m.UserInfo = new(UserInfo)
	args = append(args, m.UserInfo.SQLScanArgs(opts)...)
	m.UserSubset = new(UserSubset)
	args = append(args, m.UserSubset.SQLScanArgs(opts)...)

	return args
}

type ComplexInfoes []*ComplexInfo

const __sqlComplexInfo_Table = "complex_info"
const __sqlComplexInfo_ListCols = "\"id\",\"address\",\"p_address\",\"metadata\",\"ints\",\"int64s\",\"strings\",\"times\",\"times_p\",\"alias_string\",\"alias_int64\",\"alias_int\",\"alias_bool\",\"alias_float64\",\"alias_p_string\",\"alias_p_int64\",\"alias_p_int\",\"alias_p_bool\",\"alias_p_float64\""
const __sqlComplexInfo_Insert = "INSERT INTO \"complex_info\" (" + __sqlComplexInfo_ListCols + ") VALUES"
const __sqlComplexInfo_Select = "SELECT " + __sqlComplexInfo_ListCols + " FROM \"complex_info\""
const __sqlComplexInfo_Select_history = "SELECT " + __sqlComplexInfo_ListCols + " FROM history.\"complex_info\""
const __sqlComplexInfo_UpdateAll = "UPDATE \"complex_info\" SET (" + __sqlComplexInfo_ListCols + ")"

func (m *ComplexInfo) SQLTableName() string  { return "complex_info" }
func (m ComplexInfoes) SQLTableName() string { return "complex_info" }

func (m *ComplexInfo) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.String(m.ID),
		core.JSON{&m.Address},
		core.JSON{m.PAddress},
		core.JSON{m.Metadata},
		core.Array{m.Ints, opts},
		core.Array{m.Int64s, opts},
		core.Array{m.Strings, opts},
		core.Array{m.Times, opts},
		core.Array{m.TimesP, opts},
		core.String(m.AliasString),
		core.Int64(m.AliasInt64),
		core.Int(m.AliasInt),
		core.Bool(m.AliasBool),
		core.Float64(m.AliasFloat64),
		m.AliasPString,
		m.AliasPInt64,
		m.AliasPInt,
		m.AliasPBool,
		m.AliasPFloat64,
	}
}

func (m *ComplexInfo) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.ID),
		core.JSON{&m.Address},
		core.JSON{&m.PAddress},
		core.JSON{&m.Metadata},
		core.Array{&m.Ints, opts},
		core.Array{&m.Int64s, opts},
		core.Array{&m.Strings, opts},
		core.Array{&m.Times, opts},
		core.Array{&m.TimesP, opts},
		(*core.String)(&m.AliasString),
		(*core.Int64)(&m.AliasInt64),
		(*core.Int)(&m.AliasInt),
		(*core.Bool)(&m.AliasBool),
		(*core.Float64)(&m.AliasFloat64),
		&m.AliasPString,
		&m.AliasPInt64,
		&m.AliasPInt,
		&m.AliasPBool,
		&m.AliasPFloat64,
	}
}

func (m *ComplexInfo) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ComplexInfoes) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ComplexInfoes, 0, 128)
	for rows.Next() {
		m := new(ComplexInfo)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ComplexInfo) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlComplexInfo_Select)
	return nil
}

func (_ ComplexInfoes) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlComplexInfo_Select)
	return nil
}

func (m *ComplexInfo) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlComplexInfo_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ComplexInfoes) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlComplexInfo_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(19)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ComplexInfo) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unused error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("complex_info")
	w.WriteRawString(" SET ")
	if m.ID != "" {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if true {
		flag = true
		w.WriteName("address")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{&m.Address})
	}
	if m.PAddress != nil {
		flag = true
		w.WriteName("p_address")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.PAddress})
	}
	if m.Metadata != nil {
		flag = true
		w.WriteName("metadata")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Metadata})
	}
	if m.Ints != nil {
		flag = true
		w.WriteName("ints")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Ints, opts})
	}
	if m.Int64s != nil {
		flag = true
		w.WriteName("int64s")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Int64s, opts})
	}
	if m.Strings != nil {
		flag = true
		w.WriteName("strings")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Strings, opts})
	}
	if m.Times != nil {
		flag = true
		w.WriteName("times")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Times, opts})
	}
	if m.TimesP != nil {
		flag = true
		w.WriteName("times_p")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.TimesP, opts})
	}
	if m.AliasString != "" {
		flag = true
		w.WriteName("alias_string")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(string(m.AliasString))
	}
	if m.AliasInt64 != 0 {
		flag = true
		w.WriteName("alias_int64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int64(m.AliasInt64))
	}
	if m.AliasInt != 0 {
		flag = true
		w.WriteName("alias_int")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.AliasInt))
	}
	if m.AliasBool {
		flag = true
		w.WriteName("alias_bool")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(bool(m.AliasBool))
	}
	if m.AliasFloat64 != 0 {
		flag = true
		w.WriteName("alias_float64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(float64(m.AliasFloat64))
	}
	if m.AliasPString != nil {
		flag = true
		w.WriteName("alias_p_string")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg((*string)(m.AliasPString))
	}
	if m.AliasPInt64 != nil {
		flag = true
		w.WriteName("alias_p_int64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg((*int64)(m.AliasPInt64))
	}
	if m.AliasPInt != nil {
		flag = true
		w.WriteName("alias_p_int")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg((*int)(m.AliasPInt))
	}
	if m.AliasPBool != nil {
		flag = true
		w.WriteName("alias_p_bool")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg((*bool)(m.AliasPBool))
	}
	if m.AliasPFloat64 != nil {
		flag = true
		w.WriteName("alias_p_float64")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg((*float64)(m.AliasPFloat64))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ComplexInfo) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlComplexInfo_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type UserTags []*UserTag

const __sqlUserTag_Table = "user_tag"
const __sqlUserTag_ListCols = "\"province\",\"new_name\""
const __sqlUserTag_Insert = "INSERT INTO \"user_tag\" (" + __sqlUserTag_ListCols + ") VALUES"
const __sqlUserTag_Select = "SELECT " + __sqlUserTag_ListCols + " FROM \"user_tag\""
const __sqlUserTag_Select_history = "SELECT " + __sqlUserTag_ListCols + " FROM history.\"user_tag\""
const __sqlUserTag_UpdateAll = "UPDATE \"user_tag\" SET (" + __sqlUserTag_ListCols + ")"

func (m *UserTag) SQLTableName() string { return "user_tag" }
func (m UserTags) SQLTableName() string { return "user_tag" }

func (m *UserTag) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.String(m.Inline.Province),
		core.String(m.Rename),
	}
}

func (m *UserTag) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.Inline.Province),
		(*core.String)(&m.Rename),
	}
}

func (m *UserTag) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *UserTags) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(UserTags, 0, 128)
	for rows.Next() {
		m := new(UserTag)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *UserTag) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserTag_Select)
	return nil
}

func (_ UserTags) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserTag_Select)
	return nil
}

func (m *UserTag) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserTag_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(2)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms UserTags) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserTag_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(2)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *UserTag) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unused error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("user_tag")
	w.WriteRawString(" SET ")
	if m.Inline.Province != "" {
		flag = true
		w.WriteName("province")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Inline.Province)
	}
	if m.Rename != "" {
		flag = true
		w.WriteName("new_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Rename)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *UserTag) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlUserTag_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(2)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type UserInlines []*UserInline

const __sqlUserInline_Table = "user_inline"
const __sqlUserInline_ListCols = "\"province\",\"province\""
const __sqlUserInline_Insert = "INSERT INTO \"user_inline\" (" + __sqlUserInline_ListCols + ") VALUES"
const __sqlUserInline_Select = "SELECT " + __sqlUserInline_ListCols + " FROM \"user_inline\""
const __sqlUserInline_Select_history = "SELECT " + __sqlUserInline_ListCols + " FROM history.\"user_inline\""
const __sqlUserInline_UpdateAll = "UPDATE \"user_inline\" SET (" + __sqlUserInline_ListCols + ")"

func (m *UserInline) SQLTableName() string { return "user_inline" }
func (m UserInlines) SQLTableName() string { return "user_inline" }

func (m *UserInline) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.String(m.Inline.Province),
		core.Ternary(m.PtrInline != nil, core.String(m.PtrInline.Province), nil),
	}
}

func (m *UserInline) SQLScanArgs(opts core.Opts) []interface{} {
	m.PtrInline = new(Address)
	return []interface{}{
		(*core.String)(&m.Inline.Province),
		(*core.String)(&m.PtrInline.Province),
	}
}

func (m *UserInline) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *UserInlines) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(UserInlines, 0, 128)
	for rows.Next() {
		m := new(UserInline)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *UserInline) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInline_Select)
	return nil
}

func (_ UserInlines) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInline_Select)
	return nil
}

func (m *UserInline) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInline_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(2)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms UserInlines) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInline_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(2)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *UserInline) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unused error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("user_inline")
	w.WriteRawString(" SET ")
	if m.Inline.Province != "" {
		flag = true
		w.WriteName("province")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Inline.Province)
	}
	if m.PtrInline != nil && m.PtrInline.Province != "" {
		flag = true
		w.WriteName("province")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PtrInline.Province)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *UserInline) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInline_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(2)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}
